var documenterSearchIndex = {"docs":
[{"location":"guide/#User-Guide","page":"Guide","title":"User Guide","text":"","category":"section"},{"location":"guide/#Functions","page":"Guide","title":"Functions","text":"","category":"section"},{"location":"guide/","page":"Guide","title":"Guide","text":"GaussianRandomProjection","category":"page"},{"location":"guide/#RandomProjections.GaussianRandomProjection","page":"Guide","title":"RandomProjections.GaussianRandomProjection","text":"GaussianRandomProjection(target_dim::Union{Integer,Nothing} = nothing;\n                        rng::AbstractRNG = Random.default_rng(), eps = 0.1)\n\nInitializes GaussianRandomProjection for gaussian random projections.\n\nElements of gaussian random matrix are drawn from a N(μ=00 σ=1sqrttarget_dim) distribution.\n\nArguments\n\ntarget_dim: The target dimension to be reduced to. \nrng: Random number generator.\neps: Sets the target_dim (if unspecified) according to the Johnson-Lindenstrauss lemma.  \n\nExamples\n\njulia> using RandomProjections\njulia> GaussianRandomProjection()\nGaussianRandomProjection{Float64}(nothing, nothing, [0.0;;], Random.TaskLocalRNG(), 0.1)\n\njulia> GaussianRandomProjection(1000)\nGaussianRandomProjection{Float64}(nothing, 1000, [0.0;;], Random.TaskLocalRNG(), 0.1)\n\njulia> using Random\njulia> rng = MersenneTwister(9)\nMersenneTwister(9)\njulia> GaussianRandomProjection(1000,rng=rng, eps=0.5)\nGaussianRandomProjection{Float64}(nothing, 1000, [0.0;;], MersenneTwister(9), 0.5)\n\n\n\n\n\n","category":"type"},{"location":"guide/","page":"Guide","title":"Guide","text":"SparseRandomProjection","category":"page"},{"location":"guide/#RandomProjections.SparseRandomProjection","page":"Guide","title":"RandomProjections.SparseRandomProjection","text":"SparseRandomProjection(target_dim::Union{Integer,Nothing} = nothing; \n                        s::Union{Real,Nothing} = nothing, \n                        rng::AbstractRNG = Random.default_rng(), eps = 0.1)\n\nInitializes SparseRandomProjection for sparse random projections.\n\nElements of sparse random matrix are set to \n\nbegincases\n -sqrtfracstarget_dim qquad with  probability  frac12s \n 00  qquadqquadqquad with  probability  frac1s \n +sqrtfracstarget_dim qquad with  probability  frac12s\n endcases\n\nas proposed by Ping Li et al. [1].\n\nArguments\n\ntarget_dim: The target dimension to be reduced to. \ns: s value defined by Achlioptas [2]. If unspecified, s = sqrtD where D is the source dimension as recommended in [1].\nrng: Random number generator.\neps: Sets the target_dim (if unspecified) according to the Johnson-Lindenstrauss lemma.  \n\nReferences:\n\n[1] Ping Li, T. Hastie and K. W. Church, 2006, “Very Sparse Random Projections”. \n[2] Dimitris Achlioptas. Database-friendly random projections: Johnson-Lindenstrauss  with binary coins. Journal of Computer and System Sciences, 66(4):671–687, 2003.\n\nExamples\n\njulia> SparseRandomProjection()\nSparseRandomProjection{Float64}(nothing, nothing, [0.0;;], nothing, TaskLocalRNG(), 0.1)\n\njulia> SparseRandomProjection(1000)\nSparseRandomProjection{Float64}(nothing, 1000, [0.0;;], nothing, TaskLocalRNG(), 0.1)\n\njulia> using Random\njulia> rng = MersenneTwister(9)\nMersenneTwister(9)\njulia> SparseRandomProjection(1000,rng=rng, eps=0.5)\nSparseRandomProjection{Float64}(nothing, 1000, [0.0;;], nothing, MersenneTwister(9), 0.5)\n\n\n\n\n\n","category":"type"},{"location":"guide/","page":"Guide","title":"Guide","text":"projection","category":"page"},{"location":"guide/#RandomProjections.projection","page":"Guide","title":"RandomProjections.projection","text":"projection(M::RandomProjection)\n\nReturns the projection matrix. \n\n\n\n\n\n","category":"function"},{"location":"guide/","page":"Guide","title":"Guide","text":"projection_size","category":"page"},{"location":"guide/#RandomProjections.projection_size","page":"Guide","title":"RandomProjections.projection_size","text":"projection_size(M::RandomProjection)\n\nReturns the size of projection matrix. \n\n\n\n\n\n","category":"function"},{"location":"guide/","page":"Guide","title":"Guide","text":"johnson_lindenstrauss_min_dim","category":"page"},{"location":"guide/#RandomProjections.johnson_lindenstrauss_min_dim","page":"Guide","title":"RandomProjections.johnson_lindenstrauss_min_dim","text":"johnson_lindenstrauss_min_dim(n_samples, eps)\n\nReturns the minimum dimension to be projected onto that satifies the Johnson-Lindenstrauss lemma.\n\nThe dimension is computed from   target_dim geq frac4ln(n_samples)fracepsilon ^22-fracepsilon ^33 as defined in [1].\n\nReferences:\n\n[1] Sanjoy Dasgupta, Anupam Gupta. An Elementary Proof of a Theorem of Johnson and Lindenstrauss. Random Structures and Algorithms, 22(1):60-65, 2003.\n\nExamples\n\njulia> johnson_lindenstrauss_min_dim(8000, 0.5)\n431\n\njulia> johnson_lindenstrauss_min_dim(1000, [0.1,0.2,0.7,0.9])\n4-element Vector{Int64}:\n 5920\n 1594\n  211\n  170\n\n\n\n\n\n","category":"function"},{"location":"guide/","page":"Guide","title":"Guide","text":"fit!","category":"page"},{"location":"guide/#RandomProjections.fit!","page":"Guide","title":"RandomProjections.fit!","text":"fit!(M::GaussianRandomProjection, X::AbstractMatrix)\n\nGiven X of dimensions (n_samples, source_dim), fits GaussianRandomProjection with a gaussian  random projection matrix of (source_dim, target_dim) dimensions.\n\nExamples\n\njulia> X = ones(100,7000);\njulia> rng = MersenneTwister(9)\nMersenneTwister(9)\njulia> gaussian_model = GaussianRandomProjection(500;rng=rng,eps=0.2)\nGaussianRandomProjection{Float64}(nothing, 500, [0.0;;], MersenneTwister(9), 0.2)\njulia> fit!(gaussian_model,X);\njulia> projection_size(gaussian_model)\n(7000, 500)\n\n\n\n\n\nfit!(M::SparseRandomProjection, X::AbstractMatrix)\n\nGiven X of dimensions (n_samples, source_dim), fits SparseRandomProjection with a  sparse random projection matrix of (source_dim, target_dim) dimensions.\n\nExamples\n\njulia> X = ones(100,7000);\njulia> rng = MersenneTwister(9)\nMersenneTwister(9)\njulia> sparse_model = SparseRandomProjection(100;rng=rng)\nSparseRandomProjection{Float64}(nothing, 100, [0.0;;], nothing, MersenneTwister(9), 0.1)\njulia> fit!(sparse_model,X);\njulia> projection_size(sparse_model)\n(7000, 100)\n\n\n\n\n\n","category":"function"},{"location":"guide/","page":"Guide","title":"Guide","text":"predict","category":"page"},{"location":"guide/#RandomProjections.predict","page":"Guide","title":"RandomProjections.predict","text":"predict(M::RandomProjection, X::AbstractMatrix)\n\nProjects data X to target dimension.\n\nExamples\n\njulia> X = ones(100,7000);\njulia> rng = MersenneTwister(9)\nMersenneTwister(9)\njulia> sparse_model = SparseRandomProjection(100;rng=rng)\nSparseRandomProjection{Float64}(nothing, 100, [0.0;;], nothing, MersenneTwister(9), 0.1)\njulia> fit!(sparse_model,X);\njulia> p = predict(sparse_model,10X);\njulia> size(p)\n(100, 100)\n\n\n\n\n\n","category":"function"},{"location":"guide/","page":"Guide","title":"Guide","text":"fit_predict!","category":"page"},{"location":"guide/#RandomProjections.fit_predict!","page":"Guide","title":"RandomProjections.fit_predict!","text":"fit_predict!(M::RandomProjection, X::AbstractMatrix)\n\nGenerates random projection matrix and projects data X to target dimension.\n\nExamples\n\njulia> X = ones(3,10);\njulia> rng = MersenneTwister(9)\nMersenneTwister(9)\njulia> sparse_model = SparseRandomProjection(5;rng=rng)\nSparseRandomProjection{Float64}(nothing, 5, [0.0;;], nothing, MersenneTwister(9), 0.1)\njulia> fit_predict!(sparse_model,X)\n3×5 Matrix{Float64}:\n -1.59054  0.795271  …  -0.795271  1.59054\n -1.59054  0.795271     -0.795271  1.59054\n -1.59054  0.795271     -0.795271  1.59054\n\n\n\n\n\n","category":"function"},{"location":"guide/","page":"Guide","title":"Guide","text":"inverse_projection   ","category":"page"},{"location":"guide/#RandomProjections.inverse_projection","page":"Guide","title":"RandomProjections.inverse_projection","text":"inverse_projection(M::RandomProjection)\n\nReturns the psuedo-inverse projection matrix.\n\n\n\n\n\n","category":"function"},{"location":"guide/#Index","page":"Guide","title":"Index","text":"","category":"section"},{"location":"guide/","page":"Guide","title":"Guide","text":"","category":"page"},{"location":"#RandomProjections.jl","page":"Home","title":"RandomProjections.jl","text":"","category":"section"},{"location":"#Package-Guide","page":"Home","title":"Package Guide","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This is a Julia package for random projections. This package supports","category":"page"},{"location":"","page":"Home","title":"Home","text":"Gaussian random projections\nSparse random projections\nJohnson-Lindenstrauss mininum dimension","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install in the Julia REPL:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg\njulia> Pkg.add(\"RandomProjections\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"To load the package:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using RandomProjections","category":"page"},{"location":"#Supported-functions","page":"Home","title":"Supported functions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
